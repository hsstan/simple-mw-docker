<?php
# This file was automatically generated by the MediaWiki 1.42.1
# installer. If you make manual changes, please keep track in case you
# need to recreate them later.
#
# See includes/MainConfigSchema.php for all configurable settings
# and their default values, but don't forget to make changes in _this_
# file, not there.
#
# Further documentation for configuration settings may be found at:
# https://www.mediawiki.org/wiki/Manual:Configuration_settings

# Protect against web entry
if ( !defined( 'MEDIAWIKI' ) ) {
	exit;
}

#Helper function to include path
function add_include_path ($path) {
    foreach (func_get_args() AS $path) {
        if (!file_exists($path) OR (file_exists($path) && filetype($path) !== 'dir')) {
            trigger_error("Include path '{$path}' not exists", E_USER_WARNING);
            continue;
        }

        $paths = explode(PATH_SEPARATOR, get_include_path());

        if (array_search($path, $paths) === false)
            array_push($paths, $path);

        set_include_path(implode(PATH_SEPARATOR, $paths));
    }
}

## Uncomment this to disable output compression
# $wgDisableOutputCompression = true;

#$wgSitename = 'My Wiki';
#$wgMetaNamespace = 'My_Wiki';

## The URL base path to the directory containing the wiki;
## defaults for all runtime URL paths are based off of this.
## For more information on customizing the URLs
## (like /w/index.php/Page_title to /wiki/Page_title) please see:
## https://www.mediawiki.org/wiki/Manual:Short_URL
$wgScriptPath = '/w';
$wgArticlePath = '/wiki/$1';

## The protocol and server name to use in fully-qualified URLs
#$wgServer = 'https://localhost';

## The URL path to static resources (images, scripts, etc.)
$wgResourceBasePath = $wgScriptPath;

## The URL paths to the logo.  Make sure you change this from the default,
## or else you'll overwrite your logo when you upgrade!
$wgLogos = [
	'1x' => "$wgResourceBasePath/resources/assets/change-your-logo.svg",
	'icon' => "$wgResourceBasePath/resources/assets/change-your-logo-icon.svg",
];

## UPO means: this is also a user preference option

$wgEnableEmail = true;
$wgEnableUserEmail = true; # UPO

$wgEmergencyContact = '';
$wgPasswordSender = '';

$wgEnotifUserTalk = false; # UPO
$wgEnotifWatchlist = false; # UPO
$wgEmailAuthentication = true;

## Database settings - commented because setted in LocalSettings.custom.php
#$wgDBtype = 'sqlite';
#$wgDBserver = '';
#$wgDBname = 'my_wiki';
#$wgDBuser = '';
#$wgDBpassword = '';

# SQLite-specific settings
#$wgSQLiteDataDir = "/var/www/data";
$wgObjectCaches[CACHE_DB] = [
	'class' => SqlBagOStuff::class,
	'loggroup' => 'SQLBagOStuff',
	'server' => [
		'type' => 'sqlite',
		'dbname' => 'wikicache',
		'tablePrefix' => '',
		'variables' => [ 'synchronous' => 'NORMAL' ],
		'dbDirectory' => $wgSQLiteDataDir,
		'trxMode' => 'IMMEDIATE',
		'flags' => 0
	]
];
$wgLocalisationCacheConf['storeServer'] = [
	'type' => 'sqlite',
	'dbname' => "{$wgDBname}_l10n_cache",
	'tablePrefix' => '',
	'variables' => [ 'synchronous' => 'NORMAL' ],
	'dbDirectory' => $wgSQLiteDataDir,
	'trxMode' => 'IMMEDIATE',
	'flags' => 0
];
$wgJobTypeConf['default'] = [
	'class' => 'JobQueueDB',
	'claimTTL' => 3600,
	'server' => [
		'type' => 'sqlite',
		'dbname' => "{$wgDBname}_jobqueue",
		'tablePrefix' => '',
		'variables' => [ 'synchronous' => 'NORMAL' ],
		'dbDirectory' => $wgSQLiteDataDir,
		'trxMode' => 'IMMEDIATE',
		'flags' => 0
	]
];
$wgResourceLoaderUseObjectCacheForDeps = true;

# Shared database table
# This has no effect unless $wgSharedDB is also set.
$wgSharedTables[] = "actor";

## Shared memory settings
$wgMainCacheType = CACHE_MEMCACHED;
$wgParserCacheType = CACHE_MEMCACHED;
$wgMessageCacheType = CACHE_MEMCACHED;
$wgSessionCacheType = CACHE_MEMCACHED;
$wgMemCachedServers = array("127.0.0.1:11211");

## To enable image uploads, make sure the 'images' directory
## is writable, then set this to true:
$wgEnableUploads = true;
$wgUseImageMagick = true;
$wgImageMagickConvertCommand = '/usr/bin/convert';

## If you use ImageMagick (or any other shell command) on a
## Linux server, this will need to be set to the name of an
## available UTF-8 locale
$wgShellLocale = "en_US.utf8";

# InstantCommons allows wiki to use images from https://commons.wikimedia.org
$wgUseInstantCommons = false;

# Periodically send a pingback to https://www.mediawiki.org/ with basic data
# about this MediaWiki instance. The Wikimedia Foundation shares this data
# with MediaWiki developers to help guide future development efforts.
$wgPingback = false;

# Site language code, should be one of the list in ./includes/languages/data/Names.php
$wgLanguageCode = 'en';

# Time zone
$wgLocaltimezone = 'UTC';

## Set $wgCacheDirectory to a writable directory on the web server
## to make your wiki go slightly faster. The directory should not
## be publicly accessible from the web.
$wgCacheDirectory = "/dev/shm/mw";
$wgEnableSidebarCache = true;
$wgUseLocalMessageCache = true;

$wgSecretKey = '226709612914eac5a0016ace2d8971ad2f5abe179debc9e26829b8cbba1b598e';

# Changing this will log out all existing sessions.
$wgAuthenticationTokenVersion = '1';

# Site upgrade key. Must be set to a string (default provided) to turn on the
# web installer while LocalSettings.php is in place
$wgUpgradeKey = 'c0e56dafc4e33c95';

## For attaching licensing metadata to pages, and displaying an
## appropriate copyright notice / icon. GNU Free Documentation
## License and Creative Commons licenses are supported so far.
$wgRightsPage = ""; # Set to the title of a wiki page that describes your license/copyright
$wgRightsUrl = "http://creativecommons.org/licenses/by-sa/3.0/";
$wgRightsText = "Creative Commons Attribution Share Alike";
$wgRightsIcon = "/cc-by-sa.png";

# Path to the GNU diff3 utility. Used for conflict resolution.
$wgDiff3 = '/usr/bin/diff3';

## Default skin: you can change the default skin. Use the internal symbolic
## names, e.g. 'vector' or 'monobook':
$wgDefaultSkin = 'vector-2022';

# Enabled skins.
# The following skins were automatically enabled:
#wfLoadSkin( 'MinervaNeue' );
#wfLoadSkin( 'MonoBook' );
#wfLoadSkin( 'Timeless' );
wfLoadSkin( 'Vector' );

# End of automatically generated settings.
# Add more configuration options below.

# Enabled Bundled extensions
wfLoadExtension('CategoryTree');
###
wfLoadExtension('Cite');
###
wfLoadExtension('ConfirmEdit');
###
wfLoadExtension('Echo');
###
wfLoadExtension('Gadgets');
###
wfLoadExtension('ImageMap');
###
wfLoadExtension('InputBox');
###
wfLoadExtension('Interwiki');
$wgGroupPermissions['sysop']['interwiki'] = true;
###
wfLoadExtension( 'Linter' );
###
wfLoadExtension('Math');
$wgMathValidModes = array( 'png' );
$wgDefaultUserOptions['math'] = 'png';
###
wfLoadExtension( 'MultimediaViewer' );
###
wfLoadExtension('Nuke');
###
wfLoadExtension( 'PageImages' );
###
wfLoadExtension('ParserFunctions');
$wgPFEnableStringFunctions = true;
###
wfLoadExtension('PdfHandler');
$wgPdfProcessor="/usr/bin/gs";
$wgPdfPostProcessor="/usr/bin/convert";
$wgPdfInfo="/usr/bin/pdfinfo";
###
wfLoadExtension( 'Poem' );
###
# Scribunto (Lua) extension
wfLoadExtension( 'Scribunto' );
$wgScribuntoSlowFunctionThreshold = 0.99;
$wgScribuntoDefaultEngine = 'luastandalone';
$wgScribuntoEngineConf['luastandalone']['luaPath'] = "/usr/bin/lua5.1";
$wgScribuntoEngineConf['luastandalone']['cpuLimit'] = 30000;
$wgScribuntoEngineConf['luastandalone']['memoryLimit'] = 209715200; # bytes
$wgMaxShellMemory = 204800; # in KB
###
wfLoadExtension('SyntaxHighlight_GeSHi');
###
wfLoadExtension( 'TemplateData' );
$wgTemplateDataUseGUI = true;
###
wfLoadExtension('TextExtracts');
###
wfLoadExtension('Thanks');
###
wfLoadExtension('TitleBlacklist');
###
wfLoadExtension( 'VisualEditor' );
// Optional: Enable VisualEditor's experimental code features
$wgDefaultUserOptions['visualeditor-enable-experimental'] = 1;
$wgVisualEditorAvailableNamespaces = [
    "Project" => true
];
###
wfLoadExtension('WikiEditor');
$wgHiddenPrefs[] = 'usebetatoolbar';
###


#not yet installed
#wfLoadExtension( 'AdvancedSearch' );
#wfLoadExtension( 'ArticleCreationWorkflow' );

#wfLoadExtension( 'CharInsert' );

#wfLoadExtension( 'CodeMirror' );

#wfLoadExtension( 'Disambiguator' );
#wfLoadExtension( 'DismissableSiteNotice' );
#wfLoadExtension( 'FileExporter' );

#wfLoadExtension( 'GeoData' );

#wfLoadExtension( 'JsonConfig' );
// Safety: before extension.json, these values were initialized by JsonConfig.php
#if ( !isset( $wgJsonConfigModels ) ) {
#    $wgJsonConfigModels = [];
#}
#if ( !isset( $wgJsonConfigs ) ) {
#    $wgJsonConfigs = [];
#}
#$wgJsonConfigEnableLuaSupport=true; 

#wfLoadExtension( 'Kartographer' );

#wfLoadExtension( 'Iframe' );
#$wgIframe = array();

#wfLoadExtension( 'LabeledSectionTransclusion' );

#wfLoadExtension('MetaDescriptionTag');

# Mobile frontend
#wfLoadExtension( 'MobileFrontend' );
#$wgMFAutodetectMobileView = true;

#wfLoadExtension( 'PageAssessments' );
#wfLoadExtension( 'PageViewInfo' );

#wfLoadExtension( 'PagedTiffHandler' );
#$wgTiffUseExiv          = true;
#$wgExiv2Command         = "/usr/bin/exiv2";
#$wgTiffUseTiffinfo      = true;
#$wgTiffTiffinfoCommand  = "/usr/bin/tiffinfo";

#wfLoadExtension( 'SandboxLink' );
#wfLoadExtension( 'TemplateSandbox' );

# TemplateStyles (required for use with Lua module bundling CSS)
#wfLoadExtension( 'TemplateStyles' );
#$wgTemplateStylesAllowedUrls = [
	#    'audio' => [ '<.>' ],
	#    'image' => [ '<.>' ],
	#    'svg' => [ '<.>' ],
	#    'font' => [ '<.>' ],
	#    'namespace' => [ '<.>' ],
	#    'css' => [ '<.>' ],
	#];
	# UploadWizard extension

	#wfLoadExtension( 'TemplateWizard' );
#$wgTemplateDataSuggestedValuesEditor = true;

#wfLoadExtension( 'TimedMediaHandler' );

# Timeline
#putenv("GDFONTPATH=/usr/share/fonts/truetype/freefont");
#wfLoadExtension( 'timeline' );
#$wgTimelineFontFile = "FreeSans.ttf";

#wfLoadExtension('TitleKey');

#wfLoadExtension( 'UniversalLanguageSelector' );

#wfLoadExtension('UploadWizard');
#$wgEnableAPI = true;
#$wgEnableWriteAPI = true;
#$wgApiFrameOptions = 'SAMEORIGIN'; // Needed to make UploadWizard work in IE, see bug 39877
#$wgUploadWizardConfig['altUploadForm'] = 'Special:Upload';
#$wgUploadWizardConfig['tutorial']['skip'] = false;
#$wgUploadWizardConfig['uwLanguages'] = [ 'en' => 'English' ];
#$wgUploadWizardConfig['allCategoriesLink'] = '';
#$wgUploadWizardConfig['alternativeUploadToolsPage'] = '';
#$wgUploadWizardConfig['wikibase']['enabled'] = false;
#$wgExtensionFunctions[] = function() {
#    $GLOBALS['wgUploadNavigationUrl'] = SpecialPage::getTitleFor( 'UploadWizard' )->getLocalURL();
#    return true;
#};

// Additional extensions used on WPEN
#wfLoadExtension( 'VipsScaler' );
#$wgVipsCommand          = "/usr/bin/vips";

#wfLoadExtension( 'Widgets' );

#$wgEnableWikibaseRepo = false;
#$wgDefaultUserOptions['wlshowwikibase'] = 0;
#$wgUploadWizardConfig['wikibase']['enabled'] = false;
#$wgEnableWikibaseClient = true; 
#require_once "$IP/extensions/Wikibase/repo/Wikibase.php";
#require_once "$IP/extensions/Wikibase/repo/ExampleSettings.php"; 
#require_once "$IP/extensions/Wikibase/client/WikibaseClient.php";
#require_once "$IP/extensions/Wikibase/client/ExampleSettings.php";

#wfLoadExtension( 'wikihiero' );
#wfLoadExtension( 'WikiLove' );

#Permit also word file extension
$wgFileExtensions = array_merge( $wgFileExtensions, array( 'doc', 'docx' ) );
# Upload file allowed extension
$wgFileExtensions = array_merge( $wgFileExtensions, array( 'zip', 'ogg', 'webm' ) );
$wgFileExtensions = array_merge( $wgFileExtensions, array( 'tiff', 'tif', 'mp3', 'oga', 'pdf', 'ppt', 'svg', 'dov', 'ott', 'ods', 'odt', 'xlsx', 'xls', 'djvu' ) );


add_include_path("/usr/share");

# Robots policies
$wgDefaultRobotPolicy = 'noindex,nofollow';
$wgNamespaceRobotPolicies = array( NS_MAIN => 'index,follow' );

# Show "add new section" tab for talk pages
$showNewSection = true;

# Disable logging in by blocked users
$wgBlockDisablesLogin = true;

# rsvg
$wgSVGConverters = array( 'rsvg' => '/usr/bin/rsvg-convert -w $width -h $height -o $output $input');
$wgSVGConverter = 'rsvg' ;

# media files
$wgDefaultUserOptions['imagesize'] = 4;

# Jobs
$wgJobRunRate = 0.1;
$wgRunJobsAsync = true;

# Uploads
ini_set('memory_limit', '512M');
ini_set('post_max_size', '100M');
ini_set('upload_max_filesize', '100M');
$wgMaxUploadSize = 1024*1024*100;

$wgUseGzip = true;

# Limit account creation to 99 per IP per day
$wgAccountCreationThrottle = [ 
	[
	'count' => 99,
	'seconds' => 86400,
	] 
];
$wgGroupPermissions['sysop']['noratelimit'] = true;

# Local interwiki prefix of this wiki
$wgLocalInterwiki = strtolower($wgSitename);

# When you make changes to this configuration file, this will make
# sure that cached pages are cleared.
$wgCacheEpoch = max( $wgCacheEpoch, gmdate( 'YmdHis', @filemtime( __FILE__ ) ) );

# Enable subpages in all namespaces
$wgNamespacesWithSubpages = array_fill(0, 200, true);

# System limitations
$wgMaxShellMemory = 1024000;
$wgMaxShellTime = 3600;
$wgMaxShellFileSize = 524288;

# Number of seconds before autoblock entries expire
$wgAutoblockExpiry = 8640000; 

# Allow user customizations
$wgAllowUserCss = false;
$wgAllowUserJs = false;

# Wikipedia namespace
define("NS_FOO", 3000);
define("NS_FOO_TALK", 3001);
$wgExtraNamespaces[NS_FOO] = "Wikipedia";
$wgExtraNamespaces[NS_FOO_TALK] = "Wikipedia_talk"; // Note underscores in the namespace name.

# Not limit for attempting to login
$wgPasswordAttemptThrottle = false;

# Allow to put __NOINDEX__ on all pages
$wgExemptFromUserRobotsControl = array();

# Allow JS for users
$wgUseSiteJs = true;
$wgAllowUserJs = false;

# Allow heavy template
$wgMaxArticleSize = 10000;
$wgExpensiveParserFunctionLimit = 10000;
$wgAllowSlowParserFunctions = true;

# Necessary if you use nginx as reverse proxy
$wgUsePrivateIPs = true;
$wgSquidServersNoPurge = array("127.0.0.1", "192.168.0.0/16");

# The following permissions were set based on your choice in the installer
$wgGroupPermissions['*']['createaccount'] = true;
$wgGroupPermissions['*']['edit'] = false;

# Include the cutom part of the configuration
require_once("$IP/LocalSettings.custom.php");